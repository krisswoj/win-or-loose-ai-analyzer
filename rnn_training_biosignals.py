# -*- coding: utf-8 -*-
"""RNN_training_biosignals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bFAmqCEyCffA615b1b53X3LzdlLty8_4
"""

import numpy as np
import pandas as pd
import re
import tqdm
import os
import tensorflow as tf
from os import listdir
from os.path import isfile, join
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
from sklearn.metrics import confusion_matrix

# from google.colab import drive
# drive.mount('/content/drive')

DATA_PATH = '/content/drive/MyDrive/rnn_preprocess_data_csv/*.csv'
DATA_PATH = '/Users/krzysztofwojdak/Documents/win-or-loose-ai-analyzer/rnn_preprocess_data_csv/*.csv'

filepaths = DATA_PATH

dataset = tf.data.Dataset.list_files(filepaths)

for line in dataset.take(10):
  print(line)

one_csv = tf.data.experimental.CsvDataset('/content/drive/MyDrive/rnn_preprocess_data_csv/E03_R09_S06_1.csv', record_defaults=font_column_types, header=True)
for el in one_csv.take(5):
  print(el)

simple_titanic = tf.data.experimental.CsvDataset('/content/drive/MyDrive/rnn_preprocess_data_csv/E03_R09_S06_1.csv', record_defaults=font_column_types, header=True)

for example in simple_titanic.take(1):
  print([e.numpy() for e in example])

for single_file in dataset.take(5):
  for line in tf.data.TextLineDataset(single_file).skip(1).take(5):
    print(line)

dataset = dataset.map(lambda filepath: tf.data.TextLineDataset(filepath).skip(1), num_parallel_calls=None)

for line in dataset.take(1):
  print(line)





WINDOW_SIZE = 7
BATCH_SIZE = 2


def windowed_dataset(ds, window_size=WINDOW_SIZE, batch_size=BATCH_SIZE, shuffle_buffer=128):
  '''Funkcje wywolujemy raz dla kazdego pliku'''
  #podzial na okna - z 'odcieciem' konca pliku
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  # for window_ in ds.take(6):
  #   for el in window_.take(4):
  #     print(el)
  ds = ds.map(lambda w: (w[:-1][1:-6], w[1:][-6:]))
  return ds.batch(batch_size)


font_column_types = [float()]*(17)

def decode_line(line):
  return tf.strings.to_number(
    tf.strings.split(
    line, sep=',', maxsplit=-1, name=None), out_type=tf.dtypes.float32, name=None)

def csv_reader_dataset(filepaths, repeat=None, n_readers=5,
  n_read_threads=None, shuffle_buffer_size=10000,
  n_parse_threads=5, batch_size=32):
  #zaczytuje nazwy sciezek
  dataset = tf.data.Dataset.list_files(filepaths)

  #otwieram pliki i pomijam 1 wiersz

  dataset = dataset.map(lambda filepath: tf.data.TextLineDataset(filepath).skip(1).map(decode_line))#, num_parallel_calls=None)
  # dataset = dataset.map(lambda x: tf.io.decode_csv(x, record_defaults=font_column_types))
  #podzial na okna
  dataset = dataset.flat_map(windowed_dataset)
  #mieszanie
  dataset = dataset.shuffle(shuffle_buffer_size)
  return dataset.prefetch(1)

ds = csv_reader_dataset(filepaths)

for line in ds.take(1):
  print(line)

